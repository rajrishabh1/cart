<?php
class Cart
{
    private $error = '';
    private $success = '';


    public function cart(){
    if (isset($_POST['csrf_token']) && hash_equals($_POST['csrf_token'], $_SESSION['csrf_token'])) {
        // Check for empty values
        require_once 'app/libs/cryptor.class.php';
        $crypt = new Cryptor();
        if (empty($_POST['puid']) && empty($_POST['quantity'])) {
            $this->error = 'Product ID is required';
        } else {
            $qty = htmlspecialchars(trim($_POST['quantity']));
            $productID = $crypt->decryptId($_POST['puid']);
            if (!isset($_SESSION['cuid'])) { // cuid means user_id,puid means product_id
                // User is not logged in
                // Add the product to the session cart
                if(!isset($_SESSION["cart"])) {
                    $_SESSION["cart"] = array();
                }
                // Add the product to the session cart
                $_SESSION["cart"][$productID] = array(
                    "qty" => $qty
                );
                $this->success = 'Product added to session cart successfully.';
            }else{
                    $productID = $crypt->decryptId($_POST['puid']);
                    $db = Database::getInstance();
                    $data = array();
                    // Fetch the cart_id associated with the user's user_id from the database
                    $sql = 'SELECT `id`, `cuid` FROM `cart` WHERE cuid = :cuid AND status = :status LIMIT 1';
                    $arr['cuid'] = $_SESSION['cuid'];
                    $arr['status'] = 1;
                    $check = $db->read($sql, $arr);
                
                    if (is_array($check)) {
                        // Check if puid already exists for the same cart_id
                        $sql2 = "SELECT id, qty FROM cart_items WHERE cart_id = :cart_id AND puid = :puid LIMIT 1";
                        $data['puid'] = htmlspecialchars(trim($productID));
                        $data['cart_id'] = $check[0]->id;

                    $existingItem = $db->read($sql2, $data);

                        if ($existingItem) {
                            // Calculate the new quantity by adding the existing quantity and the new quantity
                            $data['qty'] = $existingItem[0]->qty + htmlspecialchars(trim($_POST['quantity']));
                            $query = "UPDATE cart_items SET qty = :qty WHERE cart_id = :cart_id AND puid = :puid";
                        } else {
                            $data['qty'] = htmlspecialchars(trim($_POST['quantity']));
                            $data['cart_id'] = $check[0]->id;
                            $query = "INSERT INTO cart_items (cart_id, puid, qty) VALUES (:cart_id, :puid, :qty)";
                        }
                        
                    $result = $db->write($query, $data);

                        if ($result) {
                            $this->success = 'Product added to the cart successfully.';
                        } else {
                            $this->error = 'Failed to add the product to the cart.';
                        }
                    }

            }
            
        }
    } else {
        $this->error = 'Invalid request. Please try again.';
    }

    $_SESSION['error'] = $this->error;
    $_SESSION['success'] = $this->success;
}

    public function getCartItems()
    {
        try {
            // Check if the user is authenticated
            if (!isset($_SESSION['cuid'])) {
                throw new Exception('User is not authenticated.');
            }

            $db = Database::getInstance();
            $cuid = $_SESSION['cuid'];

            $sql = 'SELECT ci.id, ci.puid, ci.qty
        FROM cart_items AS ci
        INNER JOIN cart AS c ON ci.cart_id = c.id
        WHERE c.cuid = :cuid AND ci.status = :status';


            $params = array(':cuid' => $cuid, ':status' => 1);

            // Use prepared statements to prevent SQL injection
            $result = $db->read($sql, $params);

            if ($result === false) {
                throw new Exception('Error while fetching cart items.');
            }

            return $result;
        } catch (Exception $e) {
            return array('error' => $e->getMessage());
        }
    }

}
?>
